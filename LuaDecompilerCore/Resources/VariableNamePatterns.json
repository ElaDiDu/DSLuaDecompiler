{
  "globalsTranslatedForAppending":
  {
    "AI_DIR_TYPE_CENTER": "Center",
    "AI_DIR_TYPE_F": "Front",
    "AI_DIR_TYPE_B": "Back",
    "AI_DIR_TYPE_L": "Left",
    "AI_DIR_TYPE_R": "Right",
    "AI_DIR_TYPE_FL": "FrontLeft",
    "AI_DIR_TYPE_FR": "FrontRight",
    "AI_DIR_TYPE_BL": "BackLeft",
    "AI_DIR_TYPE_BR": "BackRight",
    "AI_DIR_TYPE_ToF": "ToFront",
    "AI_DIR_TYPE_ToB": "ToBack",
    "AI_DIR_TYPE_ToL": "ToLeft",
    "AI_DIR_TYPE_ToR": "ToRight",
    "AI_DIR_TYPE_ToFL": "ToFrontLeft",
    "AI_DIR_TYPE_ToFR": "ToFrontRight",
    "AI_DIR_TYPE_ToBL": "ToBackLeft",
    "AI_DIR_TYPE_ToBR": "ToBackRight",
    "AI_SPA_DIR_TYPE_TargetF": "TargetFront",
    "AI_SPA_DIR_TYPE_ToTarget": "ToTarget",
    "AI_SPA_DIR_TYPE_Absolute": "Absolute",
    "DIST_Near": "Near",
    "DIST_Middle": "Middle",
    "DIST_Far": "Far",
    "DIST_Out": "Out",
    "DIST_None": "None",
    "TARGET_NONE": "None",
    "TARGET_SELF": "Self",
    "TARGET_ENE_0": "Enemy",
    "TARGET_FRI_0": "Friend",
    "TARGET_EVENT": "Event",
    "TARGET_LOCALPLAYER": "Local",
    "TARGET_LowHp_Friend": "LowFriend",
    "TARGET_INTERMEDIATE_POINT": "Intermediate",
    "TARGET_TEAM_FORMATION": "Formation",
    "TARGET_TEAM_LEADER": "Leader",
    "TARGET_RIDE_0": "Ride",
    "TARGET_SEARCH": "Search",
    "TARGET_SOUND": "Sound",
    "TARGET_HOSTPLAYER": "Host",
    "POINT_INITIAL": "Initial",
    "POINT_EVENT": "PointEvent",
    "POINT_MOVE_POINT": "MovePoint",
    "POINT_INIT_POSE": "Init",
    "AI_EXCEL_THINK_PARAM_TYPE__NONE": "None",
    "AI_EXCEL_THINK_PARAM_TYPE__maxBackhomeDist": "MaxHomeDist",
    "AI_EXCEL_THINK_PARAM_TYPE__backhomeDist": "HomeDist",
    "AI_EXCEL_THINK_PARAM_TYPE__backhomeBattleDist": "HomeBattleDist",
    "AI_EXCEL_THINK_PARAM_TYPE__nonBattleActLife": "NonBattleActLife",
    "AI_EXCEL_THINK_PARAM_TYPE__BattleStartDist": "BattleStartDist",
    "AI_EXCEL_THINK_PARAM_TYPE__bMoveOnHearSound": "MoveOnHear",
    "AI_EXCEL_THINK_PARAM_TYPE__CannotMoveAction": "CannotMoveAct",
    "AI_EXCEL_THINK_PARAM_TYPE__battleGoalID": "BattleGoal",
    "AI_EXCEL_THINK_PARAM_TYPE__BackHome_LookTargetTime": "HomeLookTargetTime",
    "AI_EXCEL_THINK_PARAM_TYPE__BackHome_LookTargetDist": "HomeLookTargetDist",
    "AI_EXCEL_THINK_PARAM_TYPE__BackHomeLife_OnHitEnemyWall": "HomeOnHitWallLife",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_IsCall": "IsCall",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_IsReply": "IsReply",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_MyPeerId": "PeerId",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_CallPeerId": "CallPeerId",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_DelayTime": "CallDelay",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_CallActionId": "CallAction",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_ReplyBehaviorType": "ReplyBehaviorType",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_ForgetTimeByArrival": "CallForgetTime",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_MinWaitTime": "CallMinWait",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_MaxWaitTime": "CallMaxWait",
    "AI_EXCEL_THINK_PARAM_TYPE__callHelp_ReplyActionId": "ReplyAction",
    "AI_EXCEL_THINK_PARAM_TYPE__thinkAttr_doAdmirer": "DoAdmire",
    "AI_EXCEL_THINK_PARAM_TYPE__goalAction_ToDisappear": "DisappearAct",
    "AI_EXCEL_THINK_PARAM_TYPE__goalAction_ToCaution": "CautionAct",
    "AI_EXCEL_THINK_PARAM_TYPE__goalAction_ToCautionImportant": "CautionImportantAct",
    "AI_EXCEL_THINK_PARAM_TYPE__changeStateAction_ToNormal": "ToNormalAct",
    "AI_EXCEL_THINK_PARAM_TYPE__caravanRole": "CaravanRole",
    "AI_EXCEL_THINK_PARAM_TYPE__goalAction_ToSearchLv1": "Search1Act",
    "AI_EXCEL_THINK_PARAM_TYPE__goalAction_ToSearchLv2": "Search2Act",
    "AI_EXCEL_THINK_PARAM_TYPE__rangedAttackId": "RangeAttackId",
    "AI_EXCEL_THINK_PARAM_TYPE__IsGuard_Act": "IsGuard",
    "AI_EXCEL_THINK_PARAM_TYPE__spEffectId_RangedAttack": "RangeAttackEffect",
    "AI_EXCEL_THINK_PARAM_TYPE__shiftAnimeId_RangedAttack": "RangeAttackOnEffectId",
    "AI_EXCEL_THINK_PARAM_TYPE__enableWeaponOnOff": "ToggleWeapon",
    "AI_EXCEL_THINK_PARAM_TYPE__weaponOffSpecialEffectId": "WeaponOffEffect",
    "AI_EXCEL_THINK_PARAM_TYPE__weaponOnSpecialEffectId": "WeaponOnEffect",
    "AI_EXCEL_THINK_PARAM_TYPE__weaponOffAnimId": "WeaponOffAnim",
    "AI_EXCEL_THINK_PARAM_TYPE__weaponOnAnimId": "WeaponOnAnim",
    "AI_EXCEL_THINK_PARAM_TYPE__surpriseAnimId": "SurpriseAnim",
    "AI_EXCEL_THINK_PARAM_TYPE__backToHomeStuckAct": "HomeStuckAct"
  },
  "funcs":
  {
    "GlobalActivate":
    [
      "ai",
      "goal"
    ],
    "GlobalUpdate":
    [
      "ai",
      "goal",
      "dT"
    ],
    "GlobalTerminate":
    [
      "ai",
      "goal"
    ],
    "GlobalInterrupt":
    [
      "ai",
      "goal"
    ],
    "Activate":
    [
      "self",
      "ai",
      "goal"
    ],
    "Update":
    [
      "self",
      "ai",
      "goal",
      "dT"
    ],
    "Terminate":
    [
      "self",
      "ai",
      "goal"
    ],
    "Interrupt":
    [
      "self",
      "ai",
      "goal"
    ],
    "Initialize":
    [
      "self",
      "ai",
      "goal",
      "battleActivatedCount"
    ],
    "Acts":
    [
      "ai",
      "goal",
      "paramTbl"
    ]
  },
  "calls":
  {
    "GetDist":
    {
      "return":
      [
        "distance"
      ],
      "args":
      [
        "ai",
        "distTarget"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetOriginDist":
    {
      "return":
      [
        "distance"
      ],
      "args":
      [
        "ai",
        "distTarget"
      ]
    },
    "GetDistXZ":
    {
      "return":
      [
        "distanceXZ"
      ],
      "args":
      [
        "ai",
        "distTarget"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetDistY":
    {
      "return":
      [
        "distanceY"
      ],
      "args":
      [
        "ai",
        "distTarget"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetDistYSigned":
    {
      "return":
      [
        "distanceY"
      ],
      "args":
      [
        "ai",
        "distTarget"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetHpRate":
    {
      "return":
      [
        "hpRate"
      ],
      "args":
      [
        "ai",
        "hpTarget"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "IsInterupt":
    {
      "return":
      [
        "isInterrupt"
      ],
      "args":
      [
        "ai",
        "interruptType"
      ]
    },
    "HasSpecialEffectId":
    {
      "return":
      [
        "hasEffect"
      ],
      "args":
      [
        "ai",
        "target",
        "effectId"
      ],
      "argsToAppendToReturn":
      [
        2
      ]
    },
    "GetNumber":
    {
      "//comment": "First arg can be AiFunc/GoalFunc/AiPlatoonFunc, do not deduce",
      "return":
      [
        "number"
      ],
      "args":
      [
        null,
        "numberIndex"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetTimer":
    {
      "//comment": "First arg can be AiFunc/GoalFunc/AiPlatoonFunc, do not deduce",
      "return":
      [
        "timer"
      ],
      "args":
      [
        null,
        "timerIndex"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetStringIndexedNumber":
    {
      "return":
      [
        "num_"
      ],
      "args":
      [
        "ai",
        "numberName"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetMapHitRadius":
    {
      "return":
      [
        "hitRadius"
      ],
      "args":
      [
        "ai",
        "target"
      ]
    },
    "GetRandam_Float":
    {
      "return":
      [
        "random"
      ],
      "args":
      [
        "ai",
        "min",
        "max"
      ]
    },
    "GetRandam_Int":
    {
      "return":
      [
        "random"
      ],
      "args":
      [
        "ai",
        "min",
        "max"
      ]
    },
    "GetEventRequest":
    {
      "return":
      [
        "eventRequest"
      ],
      "args":
      [
        "ai",
        "requestSlot"
      ]
    },
    "GetPrevTargetState":
    {
      "return":
      [
        "prevTargetingState"
      ],
      "args":
      [
        "ai"
      ]
    },
    "GetCurrTargetType":
    {
      "return":
      [
        "currTargetingState"
      ],
      "args":
      [
        "ai"
      ]
    },
    "AddObserveSpecialEffectAttribute":
    {
      "args":
      [
        "ai",
        "targetObserved",
        "effectObserved"
      ]
    },
    "GetNPCActProb":
    {
      "return":
      [
        "actProb"
      ],
      "args":
      [
        "ai",
        "actId"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetNpcThinkParamID":
    {
      "return":
      [
        "thinkParam"
      ],
      "args":
      [
        "ai"
      ]
    },
    "AddTopGoal":
    {
      "return":
      [
        "topGoal"
      ],
      "args":
      [
        "ai",
        "goalId",
        "goaLife"
      ]
    },
    "FollowPath":
    {
      "args":
      [
        "ai",
        "moveTarget",
        "directionFromTarget",
        "stopDistance",
        "walk",
        "directionalDistance",
        "xzDistanceOnly",
        "defaultOrientationAndStopDist",
        "closeProximityMode"
      ]
    },
    "GetAbsoluteAngleFromTarget":
    {
      "return":
      [
        "angleToTarget"
      ],
      "args":
      [
        "ai",
        "target"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetRelativeAngleFromTarget":
    {
      "return":
      [
        "angleToTarget"
      ],
      "args":
      [
        "ai",
        "target"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetExcelParam":
    {
      "return":
      [
        "param"
      ],
      "args":
      [
        "ai",
        "paramType"
      ],
      "argsToAppendToReturn":
      [
        1
      ]
    },
    "GetExistMeshOnLineDist":
    {
      "return":
      [
        "distToMesh"
      ],
      "args":
      [
        "ai",
        "targetOrigin",
        "directionFromTarget",
        "maxDistance"
      ]
    },
    "GetExistMeshOnLineDistEx":
    {
      "return":
      [
        "distToMesh"
      ],
      "args":
      [
        "ai",
        "targetOrigin",
        "directionFromTarget",
        "maxDistance",
        "lineWidth",
        "lineStartDist"
      ]
    },
    "GetExistMeshOnLineDistSpecifyAngle":
    {
      "return":
      [
        "distToMesh"
      ],
      "args":
      [
        "ai",
        "targetOrigin",
        "angle",
        "maxDistance",
        "spatialDirection"
      ]
    },
    "GetExistMeshOnLineDistSpecifyAngleEx":
    {
      "return":
      [
        "distToMesh"
      ],
      "args":
      [
        "ai",
        "targetOrigin",
        "angle",
        "maxDistance",
        "spatialDirection",
        "lineWidth",
        "lineStartDist"
      ]
    },
    "IsExistMeshOnLine":
    {
      "return":
      [
        "existMesh"
      ],
      "args":
      [
        "ai",
        "targetOrigin",
        "angle",
        "maxDistance"
      ]
    },
    "AddSubGoal":
    {
      "return":
      [
        "subGoal"
      ],
      "args":
      [
        "goal",
        "goalId",
        "goalLife"
      ]
    },
    "Common_Battle_Activate":
    {
      "args":
      [
        "ai",
        "goal",
        "probabilities",
        "acts",
        "actAfter",
        "paramTbls"
      ]
    },
    "Approach_Act_Flex":
    {
      "args":
      [
        "ai",
        "goal",
        "stopDist",
        "canRunDist",
        "forceRunMinDist",
        "runProbability",
        "guardProbability",
        "walkLife",
        "runLife"
      ]
    },
    "Approach_Act":
    {
      "args":
      [
        "ai",
        "goal",
        "stopDist",
        "runDist",
        "guardProb",
        "life"
      ]
    },
    "Init_Pseudo_Global":
    {
      "args":
      [
        "ai",
        "goal"
      ]
    },
    "Common_Clear_Param":
    {
      "args":
      [
        "probabilities",
        "acts",
        "paramTbls"
      ]
    },
    "SpaceCheck":
    {
      "return":
      [
        "hasSpace"
      ],
      "args":
      [
        "ai",
        "goal",
        "angle",
        "maxDistToWall"
      ]
    },
    "Counter_Act":
    {
      "return":
      [
        "shouldCounter"
      ],
      "args":
      [
        "ai",
        "goal",
        "probabilityFactorPerHit",
        "counterAttackId"
      ]
    },
    "ReactBackstab_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "stepReactionType",
        "reactAttackId",
        "attackProbability"
      ]
    },
    "SetCoolTime":
    {
      "return":
      [
        "adjustedProbability"
      ],
      "args":
      [
        "ai",
        "goal",
        "animationId",
        "cooldown",
        "returnNotInCooldown",
        "returnInCooldown"
      ]
    },
    "InsideDir":
    {
      "return":
      [
        "isInside"
      ],
      "args":
      [
        "ai",
        "goal",
        "angleStart",
        "angleWidth"
      ]
    },
    "InsideRange":
    {
      "return":
      [
        "isInside"
      ],
      "args":
      [
        "ai",
        "goal",
        "angleStart",
        "angleWidth",
        "minDist",
        "maxDist"
      ]
    },
    "GetTargetAngle":
    {
      "return":
      [
        "targetInAngle"
      ],
      "args":
      [
        "ai",
        "target"
      ]
    },
    "Backstab_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "observeSlot",
        "stopDist",
        "cooldownTimerSlot",
        "cooldown"
      ]
    },
    "Parry_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "parryMaxDist",
        "enemyLookToMeForParryMaxDist",
        "critMaxDist",
        "enemyLookToMeForCritMaxDist"
      ]
    },
    "Approach_or_Leave_Act":
    {
      "args":
      [
        "ai",
        "goal",
        "minDist",
        "maxDist",
        "runDist",
        "guardProb"
      ]
    },
    "Shoot_Act":
    {
      "args":
      [
        "ai",
        "goal",
        "firstAttack",
        "nextAttack",
        "comboLength"
      ]
    },
    "FindShoot_Act":
    {
      "return":
      [
        "actType"
      ],
      "args":
      [
        "ai",
        "goal",
        "probability1",
        "probability2",
        "probability3",
        "distance1",
        "distance2",
        "distance3"
      ]
    },
    "FindGuardFinish_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "FindGuardBreak_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "MissSwing_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "FarDamaged_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "SuccessGuard_Attack":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "attack"
      ]
    },
    "SuccessGuard_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "RebByOpGuard_Step":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "backstepProbability",
        "leftstepProbability",
        "rightstepProbability",
        "safetyDist"
      ]
    },
    "MissSwingSelf_Step":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "backstepProbability",
        "leftstepProbability",
        "rightstepProbability",
        "safetyDist"
      ]
    },
    "Shoot_2dist":
    {
      "return":
      [
        "actType"
      ],
      "args":
      [
        "ai",
        "goal",
        "distance1",
        "distance2",
        "probability1",
        "probability2"
      ]
    },
    "Shoot_1kind":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "UseItem_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "MissSwing_Attack":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "attack"
      ]
    },
    "MissSwing_Int":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "GuardBreak_Attack":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "attack"
      ]
    },
    "GuardBreak_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "Damaged_Step_or_Guard":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "stepProbability",
        "backstepProbability",
        "leftstepProbability",
        "rightstepProbability",
        "safetyDist",
        "leaveProbability",
        "sidewayProbability",
        "stopDist"
      ]
    },
    "Damaged_Step":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "stepProbability",
        "backstepProbability",
        "leftstepProbability",
        "rightstepProbability",
        "safetyDist"
      ]
    },
    "Damaged_Guard":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "leaveProbability",
        "sidewayProbability",
        "stopDist"
      ]
    },
    "Damaged_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "FindAttack_Step_or_Guard":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "stepProbability",
        "backstepProbability",
        "leftstepProbability",
        "rightstepProbability",
        "safetyDist",
        "leaveProbability",
        "sidewayProbability",
        "stopDist"
      ]
    },
    "FindAttack_Guard":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "leaveProbability",
        "sidewayProbability",
        "stopDist"
      ]
    },
    "FindAttack_Step":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "backstepProbability",
        "leftstepProbability",
        "rightstepProbability",
        "safetyDist"
      ]
    },
    "FindAttack_Act":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability"
      ]
    },
    "FindAttack_Step_NPCPlayer":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "backstepProbability",
        "leftstepProbability",
        "rightstepProbability"
      ]
    },
    "Damaged_StepCount_NPCPlayer":
    {
      "return":
      [
        "reacted"
      ],
      "args":
      [
        "ai",
        "goal",
        "reactDistance",
        "reactProbability",
        "attackProbability",
        "attack",
        "backstepProbability",
        "leftstepProbability",
        "rightstepProbability"
      ]
    },
    "NPC_Approach_Act_Flex":
    {
      "args":
      [
        "ai",
        "goal",
        "stopDist",
        "canRunDist",
        "forceRunMinDist",
        "runProbability",
        "guardProbability",
        "walkLife",
        "runLife"
      ]
    }
  },
  "goals":
  {
    "GOAL_COMMON_Stay":
    [
      "reactEnemyDistance",
      "turnTarget"
    ],
    "GOAL_COMMON_WalkAround":
    [
      "movingCircleRadius",
      "walk",
      "reactEnemyDistance",
      "isWalkAroundFreePoint"
    ],
    "GOAL_COMMON_BackToHome":
    [
      "reactEnemyDistance",
      "forceBattleGoalWhenDamaged",
      null,
      null,
      "moveTarget"
    ],
    "GOAL_COMMON_NonBattleAct":
    [
      "reactEnemyDistance",
      "reactToEnemies",
      "run",
      "turnTarget",
      "stopDistance",
      "standbyGoal",
      "forceBattleGoalWhenDamaged"
    ],
    "GOAL_COMMON_If":
    [
      "codeNo"
    ],
    "GOAL_COMMON_Wait":
    [
      "turnTarget"
    ],
    "GOAL_COMMON_Turn":
    [
      "turnTarget",
      "withinAngle",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd"
    ],
    "GOAL_COMMON_TurnAround":
    [
      "turnTarget",
      "dirType",
      "angleWidth",
      "walk",
      "successOnEnd",
      "guardStateId"
    ],
    "GOAL_COMMON_WaitWithAnime":
    [
      "animationId",
      "target"
    ],
    "GOAL_COMMON_MoveToSomewhereSmooth":
    [
      "moveTarget",
      "orientationFromTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "directionalDistance"
    ],
    "GOAL_COMMON_ApproachTarget_LifeSuccess":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd"
    ],
    "GOAL_COMMON_ApproachTarget":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd",
      "xzDistanceOnly"
    ],
    "GOAL_COMMON_LeaveTarget":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd"
    ],
    "GOAL_COMMON_SidewayMove":
    [
      "moveTarget",
      "isRight",
      "stopAngle",
      "isWalk",
      "successOnEnd",
      "guardStateId",
      "guardEndType"
    ],
    "GOAL_COMMON_SidewayMoveAngle":
    [
      "moveTarget",
      "isRight",
      "stopAngle",
      "walk",
      "successOnEnd",
      "guardStateId",
      "guardEndType"
    ],
    "GOAL_COMMON_SidewayMoveAvoidChr":
    [
      "moveTarget",
      "isRight",
      "stopAngle",
      "walk",
      "successOnEnd",
      "guardStateId",
      "guardEndType"
    ],
    "GOAL_COMMON_KeepDist":
    [
      "moveTarget",
      "minDistance",
      "maxDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd"
    ],
    "GOAL_COMMON_MoveToSomewhere":
    [
      "moveTarget",
      "orientationFromTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "directionalDistance",
      null,
      "xzDistanceOnly",
      "useDefaultOrieDist",
      "closeProximityMode"
    ],
    "GOAL_COMMON_SpinStep":
    [
      "animationId",
      "target",
      "turnTime",
      "stepDirection",
      "safetyDistance"
    ],
    "GOAL_COMMON_Fall":
    [
      "target",
      "startEzStateId",
      "stopEzStateId",
      "fallMarginMeters"
    ],
    "GOAL_COMMON_MoveToMovePointAir":
    [
      "moveTarget",
      "directionFromTargetFront"
    ],
    "GOAL_COMMON_MoveTargetRelationPos":
    [
      "targetPos",
      null,
      "stopDistance",
      "turnTarget",
      null,
      "directionalDistance"
    ],
    "GOAL_COMMON_MoveFollowPathSpecifyPos":
    [
      "moveTargetAlmostUnused",
      null,
      "stopDistance",
      "turnTarget",
      null,
      null,
      "x",
      "y",
      "z"
    ],
    "GOAL_COMMON_MoveToSomewhere_RouteMove":
    [
      "moveTarget",
      "orientationFromTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "directionalDistance",
      "xzDistanceOnly",
      "useDefaultOrieDist",
      "closeProximityMode"
    ],
    "GOAL_COMMON_MoveToSomewhere_SwitchRouteMove":
    [
      "turnTarget",
      "walk",
      null,
      "isAIsStandardPoints"
    ],
    "GOAL_COMMON_MoveToSomewhere_SpecifyMove":
    [
      "turnTarget",
      "walk",
      null,
      "specificPointIndex"
    ],
    "GOAL_COMMON_MoveGetwellSpace":
    [
      "backPriority",
      "leftPriority",
      "rightPriority",
      "turnTarget",
      "safetyDistance",
      "successOnCantMove"
    ],
    "GOAL_COMMON_ExecAction":
    [
      "action"
    ],
    "GOAL_COMMON_FollowPathExecAction":
    [
      "action",
      "moveTarget",
      "orientationFromTarget",
      "stopDistance",
      "turnTarget",
      "directionalDistance"
    ],
    "GOAL_COMMON_ToTargetWarp":
    [
      "warpTarget",
      "orientationFromTarget",
      "distanceFromTarget",
      "turnTarget",
      "minHeightOffset",
      "maxHeightOffset",
      "warpExecMinDist"
    ],
    "GOAL_COMMON_ApproachTargetAllDirection":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd",
      "xzDistanceOnly"
    ],
    "GOAL_COMMON_SideWay_On_FailedPath":
    [
      "pathCheckInterval",
      "animationIdMidAction",
      "midActionLife",
      "midActionInterval",
      "giveUpTime",
      "isGuard",
      "isReturnLimitTime"
    ],
    "GOAL_COMMON_ApproachTarget_ParallelMov":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd"
    ],
    "GOAL_COMMON_FlexibleSideWayMove":
    [
      "leftPriority",
      "rightPriority",
      "target",
      "safetyDistance",
      "stopAngle",
      "guardOdds",
      "minDistance",
      "maxDistance"
    ],
    "GOAL_COMMON_MoveToMultiPoint":
    [
      "stopDistance",
      "turnTarget",
      "walk",
      "point1",
      "point2",
      "point3",
      "point4",
      "point5",
      "point6",
      "point7",
      "point8",
      "point9",
      "point10"
    ],
    "GOAL_COMMON_MoveToPossibleDirection":
    [
      "referenceTarget",
      "turnTarget",
      "stopDistance",
      "maxAllowedAngle",
      "intervalsOfAngle",
      "runOdds",
      "guardOdds",
      "stopDistance"
    ],
    "GOAL_COMMON_SideWay_For_Fear_Of_Fire":
    [
      "stopDistance",
      "guardStateId",
      "canGoSideways"
    ],
    "GOAL_COMMON_ApproachTarget_OnUnfavorableAttack":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd",
      "xzDistanceOnly"
    ],
    "GOAL_COMMON_ApproachForBuddy":
    [
      "trackTarget",
      "stopDistanceForRelativePos",
      "turnTarget",
      "walk",
      "guardStateId",
      "angleStartToRelativePos",
      "angleWidth",
      "distanceToRelativePos"
    ],
    "GOAL_COMMON_SideWay_On_FailedPath_WhiteGhost":
    [
      "pathCheckInterval"
    ],
    "GOAL_COMMON_Landing":
    [
      "moveTarget",
      "stopDistance"
    ],
    "GOAL_COMMON_Landing_Move":
    [
      "stopDistance"
    ],
    "GOAL_COMMON_ComeDown":
    [
      "stopDistance"
    ],
    "GOAL_COMMON_KeepDistYAxis":
    [
      "distanceTarget",
      "minDistance",
      "maxDistance",
      "turnTarget"
    ],
    "GOAL_COMMON_ApproachSettingDirection":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "orientationFromTarget",
      "directionalDistance"
    ],
    "GOAL_COMMON_AIJump":
    [
      "target"
    ],
    "GOAL_COMMON_FadeWarpToInitPos":
    [
      "fadeTime",
      null
    ],
    "GOAL_COMMON_WalkAround_Anywhere":
    [
      "stopDistance",
      "moveLife",
      "walk",
      "lookAroundAnimId",
      "lookAroundLife",
      "lookAroundAmount",
      "isLookAroundBeforeMove",
      "resetMovementPoints",
      "isWaitWithLookAround"
    ],
    "GOAL_COMMON_Attack":
    [
      "animationId",
      "target",
      "successDistance",
      "angleUp",
      "angleDown"
    ],
    "GOAL_COMMON_Guard":
    [
      "guardStateId",
      "turnTarget",
      "successfulGuardResult",
      "endAfterBlock"
    ],
    "GOAL_COMMON_ComboAttack":
    [
      "animationId",
      "target",
      "successDistance",
      "angleUp",
      "angleDown",
      "successAngle"
    ],
    "GOAL_COMMON_GuardBreakAttack":
    [
      "animationId",
      "target",
      "successDistance",
      "angleUp",
      "angleDown"
    ],
    "GOAL_COMMON_NonspinningAttack":
    [
      "animationId",
      "target",
      "successDistance",
      "angleUp",
      "angleDown"
    ],
    "GOAL_COMMON_ContinueAttack":
    [
      "animationId",
      "target",
      "successDistance",
      "successOnHit"
    ],
    "GOAL_COMMON_ApproachStep":
    [
      "animationId",
      "target",
      "stopDistance"
    ],
    "GOAL_COMMON_UseItem":
    [
      "itemIndex"
    ],
    "GOAL_COMMON_DashAttack":
    [
      "target",
      "stopDistance",
      "animationId",
      "guardStateId"
    ],
    "GOAL_COMMON_DashAttack_Attack":
    [
      "target",
      "animationId"
    ],
    "GOAL_COMMON_NPCStepAttack":
    [
      null,
      "r1AttackRange",
      "r2AttackRange",
      "ifBothR1Odds",
      "isR1DualWield"
    ],
    "GOAL_COMMON_Parry":
    [
      "animationId",
      "target",
      "successDistance"
    ],
    "GOAL_COMMON_SpecialTurn":
    [
      "animationId",
      "target",
      "turningAngle"
    ],
    "GOAL_COMMON_TeamCallHelp":
    [
      "turnTarget"
    ],
    "GOAL_COMMON_NpcComboAttack_WithMove":
    [
      "animationId1",
      "animationId2",
      "target",
      "successDistance",
      "meshCheckDir1",
      "meshCheckDir2",
      "comboStage",
      "meshCheckDist",
      "turnTime",
      "turnFaceAngle",
      "angleUp",
      "angleDown"
    ],
    "GOAL_COMMON_NpcStanceAttack_WithMove":
    [
      "target",
      "stanceStartButton",
      "meshCheckDist",
      "turnTime",
      "turnFaceAngle",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_CommonAttack":
    [
      "animationId",
      "target",
      "successDistance",
      "successAngle",
      "turnTime",
      "turnFaceAngle",
      "isComboAttack",
      "isMoveCancel",
      "isGuardBreakAttack",
      "isTurn",
      "angleUp",
      "angleDown",
      "isCancelAttack"
    ],
    "GOAL_COMMON_ComboRepeat":
    [
      "animationId",
      "target",
      "successDistance",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_ComboFinal":
    [
      "animationId",
      "target",
      "successDistance",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_AttackTunableSpin":
    [
      "animationId",
      "target",
      "successDistance",
      "turnTime",
      "turnFaceAngle",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_ComboAttackTunableSpin":
    [
      "animationId",
      "target",
      "successDistance",
      "turnTime",
      "turnFaceAngle",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_ComboAttack_SuccessAngle180":
    [
      "animationId",
      "target",
      "successDistance",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_ComboRepeat_SuccessAngle180":
    [
      "animationId",
      "target",
      "successDistance",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_Pursuit":
    [
      "animationId",
      "target",
      "successDistance",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_NonspinningComboAttack":
    [
      "animationId",
      "target",
      "successDistance",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_NonspinningComboRepeat":
    [
      "animationId",
      "target",
      "successDistance",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_NonspinningComboFinal":
    [
      "animationId",
      "target",
      "successDistance",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_ComboTunable_SuccessAngle180":
    [
      "animationId",
      "target",
      "successDistance",
      "turnTime",
      "turnFaceAngle",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_GuardBreakTunable":
    [
      "animationId",
      "target",
      "successDistance",
      "turnTime",
      "turnFaceAngle",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_AttackNonCancel":
    [
      "animationId",
      "target",
      "successDistance",
      "turnTime",
      "turnFaceAngle",
      "upAngle",
      "downAngle"
    ],
    "GOAL_COMMON_CautionStateApproachTarget_WalkAround":
    [
      "isWalkAroundFreePoint",
      "minGoalTime",
      "walk"
    ],
    "GOAL_COMMON_CautionStateApproachTarget_WAEA":
    [
      "walk"
    ],
    "GOAL_COMMON_TargetStateBehavior":
    [
      "targetState",
      "goalIdOrAction"
    ],
    "GOAL_COMMON_WeaponChange":
    [
      "index"
    ],
    "GOAL_COMMON_StepSafety":
    [
      "frontPriority",
      "backPriority",
      "leftPriority",
      "rightPriority",
      "target",
      "safetyDistance",
      "turnTime",
      "isAlwaysSuccess"
    ],
    "GOAL_COMMON_Wait_On_FailedPath":
    [
      "pathCheckInterval"
    ],
    "GOAL_COMMON_Approach_On_FailedPath":
    [
      "pathCheckInterval",
      "moveTarget",
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk"
    ],
    "GOAL_COMMON_WalkAround_On_FailedPath":
    [
      "pathCheckInterval"
    ],
    "GOAL_COMMON_BackToHome_On_FailedPath":
    [
      "pathCheckInterval",
      "reactEnemyDistance"
    ],
    "GOAL_COMMON_Guard_On_FailedPath":
    [
      "pathCheckInterval",
      "giveUpTime",
      "guardStateId",
      "isReturnLimitTime"
    ],
    "GOAL_COMMON_MoveToWaitandSee":
    [
      "stopDistance",
      "turnTarget",
      "walk",
      "pathCheckInterval",
      null,
      null,
      null,
      "xzDistanceOnly"
    ],
    "GOAL_COMMON_WaypointAnimTrial":
    [
      "waypointAttribute"
    ],
    "GOAL_COMMON_ContinueKeepDist":
    [
      "target",
      "minDistance",
      "maxDistance",
      null,
      "closeGuardOdds",
      "farGuardOdds"
    ],
    "GOAL_COMMON_GuardBreakCombo":
    [
      "attackIdStart",
      "attackIdFinal",
      "target",
      "successDistanceFinalAttack",
      "turnTime",
      "turnFaceAngle"
    ],
    "GOAL_COMMON_Mount":
    [
      "stopDistance",
      "cantRideCooldown"
    ],
    "GOAL_COMMON_SetTimerRealtime":
    [
      "index",
      "value"
    ],
    "GOAL_COMMON_SetNumberRealtime":
    [
      "index",
      "value"
    ],
    "GOAL_COMMON_Fall_Asleep":
    [
      "isForcedSleep"
    ],
    "GOAL_COMMON_LeaveTargetToPathEnd":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd",
      "spaceCheckDistance"
    ],
    "GOAL_COMMON_LeaveTarget_Continuous":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "guardStateId",
      "guardEndType",
      "guardSuccessOnEnd",
      "spaceCheckDistance"
    ],
    "GOAL_COMMON_LeaveTarget_Escape":
    [
      "moveTarget",
      "stopDistance",
      "turnTarget",
      "walk",
      "fixedPointStopDistance"
    ],
    "GOAL_COMMON_ErrorNotification":
    [
      "errorCode"
    ]
  }
}
